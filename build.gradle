import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("io.qameta.allure.gradle.report:allure-report-plugin:2.11.2")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.qameta.allure' version '2.11.2'
}


group = 'com.demo'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.testng:testng:7.7.0'
    implementation 'com.codeborne:selenide:6.14.1'
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.1'
    implementation 'org.seleniumhq.selenium:selenium-api:4.9.1'
    implementation 'org.seleniumhq.selenium:selenium-java:4.9.1'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:slf4j-log4j12:1.7.5'
    implementation 'io.qameta.allure:allure-testng:2.22.1'
    testImplementation 'org.projectlombok:lombok:1.18.26'
    runtimeOnly 'org.aspectj:aspectjrt:1.6.7'
    compileOnly 'org.projectlombok:lombok:1.18.28'
}

task smokeTest(type: Test) {
    useTestNG() {
        def threadCount = System.getProperty("threadCount", "2")
        suiteXmlBuilder().suite(name: 'smoke.tests', parallel: 'classes', 'thread-count': threadCount) {
            listeners << 'listeners.TestMethodListenerClass'
            test(name: 'Smoke tests') {
                if (project.hasProperty('server')) {
                    systemProperty 'server', "${server}"
                }
                if (project.hasProperty('suite')) {
                    systemProperty 'suite', "${suite}"
                }

                if (project.hasProperty('env')) {
                    systemProperty 'env', "${env}"
                }
                groups {
                    includeGroups("smoke")
                }
                packages {
                    'package'(name: 'com.demo.testframework.*')
                }
            }
            print_settings()
        }
    }
}

private void print_settings() {
    println "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
    println "-----------------------------   " + "${env}".toUpperCase() + " ENVIRONMENT IS RUNNING NOW ON " +
            "${server}".toUpperCase() + " SERVER   -----------------------------\n";
    println "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
    println "--------------------------------------------    GLOBAL SETTINGS:    --------------------------------------------\n";
    println "${browser}".toUpperCase() + " - BROWSER NAME"
    println "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n";
}

tasks.withType(Test).configureEach {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.successfulTestCount + result.failedTestCount} (${result.successfulTestCount + result.failedTestCount} tests," +
                        " ${result.successfulTestCount} passed, ${result.failedTestCount} failed)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}